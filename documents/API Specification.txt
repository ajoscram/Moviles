RESTaurantes API Specification

The following document describes every HTTP request possible in the system, described by a use case basis.
Every request description includes the HTTP method, route, and JSON returned.
Finally, they include every possible error string they may return on faulty requests.

----------------------------------------------------------------------------------------------------------------
Errors are represented as a JSON comprised of two fields: success and error.

The success field is always false for errors, because it indicates an error occurred. Non-error replies also
include this field, but it is always set to true. Clients should always check this field for errors, and present
an error when it is set to false.

The error field holds any of the error strings described below, under each route's "Errors" section.
There are three special types of error:
    UNHANDLED_ROUTE (triggered given when a unhandled route is accessed)
    NOT_IMPLEMENTED_YET (the route is handled in the system but it is not currently implemented)

Errors look like this:
{
    success: false,
    error: string
}
----------------------------------------------------------------------------------------------------------------

- getting the system strings in a JSON file:
    GET /strings
    {
        success: true,
        data: {
            users: {
                ...every user type
            },
            prices: {
                ...every price type
            },
            days: {
                ...every day of the week
            },
            errors: {
                ...every possible error
            }
        }
    }

- user sign up:
    POST /users/:name/:email/:password
    {
        success: true
    }

    Errors:
        DB_ERROR (this error is returned when request could not be handled in time or at all)
        EMAIL_USED (email is currently used by another account)
        INCORRECT_EMAIL_FORMAT (the email is not in the form of person@somewhere.com)

- user login:
    POST /users/sessions/:email/:password/:type <- type must be "ADMINISTRATOR" or "REGULAR"
    {
        success: true,
        data: {
            session: string
        }
    }

    Errors:
        DB_ERROR (this error is returned when request could not be handled in time or at all)
        UNKNOWN_EMAIL (email is not registered in the database)
        INCORRECT_PASSWORD (password does not match the account's)
        UNKNOWN_LOGIN_TYPE (the type was different from ADMINISTRATOR or REGULAR)
        USER_IS_NOT_ADMINISTRATOR (the user attempted to log in as administrator on a regular account)

- session login:
    PUT /users/sessions/:id
    {
        success: true,
        data: {
            session: string
        }
    }

    Errors:
        DB_ERROR (this error is returned when request could not be handled in time or at all)
        UNKNOWN_SESSION (the session id given is not currently used in an active session)

- session logout:
    DELETE /users/sessions/:id
    {
        success: true
    }
    Errors:
        DB_ERROR (this error is returned when request could not be handled in time or at all)
        UNKNOWN_SESSION (the session id given is not currently used in an active session)

- user forgot password:
    GET /users/:email
    {
        success: true
    }

    Errors:
        DB_ERROR (this error is returned when request could not be handled in time or at all)
        UNKNOWN_EMAIL (email is not registered in the database)
        MAIL_PASSWORD_ERROR (error while sending the password to the user)

----------------------------------------------------------------------------------------------------------------
From this point on, every single non-GET request requires a session token to be given via the HTML's body.
It must be embedded in a JSON, which looks like this:
{
    session: string
}
If this JSON is not found on ANY request of the requests specified below, an error is returned.
----------------------------------------------------------------------------------------------------------------

- add new restaurant:
    POST /restaurants/:data
    {
        success: true
    }

    The data parameter is a JSON stringified and WILL be parsed upon arrival.
    It MUST have the following structure:

    {
        name: string,
        type: string, <- this refers to food type, like fast food or gourmet
        price: string, <- values restricted to CHEAP, AFFORDABLE, EXPENSIVE
        location: {
            type: "Point", <- LITERALLY the string "Point"
            coordinates: [longitude, latitude] <- in that order, both doubles
        },
        schedule: {
            MONDAY: { <- available days: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
                start: {
                    hour: int, <- 0 to 23
                    minute: int <- 0 to 59
                },
                end: {
                    hour: int, <- 0 to 23
                    minute: int <- 0 to 59
                }
            },
            ...same for every other day of the week
        },
        contacts: [
            {
                name: string,
                value: string
            },
            ...n contacts
        ]
    }

    Errors:
        DB_ERROR (this error is returned when request could not be handled in time or at all)
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        UNPARSABLE_JSON (the string received could not be parsed to a JSON)
        INCOMPLETE_JSON (the JSON is missing a field)
        INCORRECT_VALUE_TYPE (a value in the key:value pairs does not hold the correct type)
        UNKNOWN_PRICE (the price isn't CHEAP, AFFORDABLE or EXPENSIVE)
        COORDINATES_OUT_OF_BOUNDS (The coordinates array has more or less than two numbers)
        LOCATION_TYPE_NOT_POINT (the location type is not the string "point")
        SCHEDULE_OUT_OF_BOUNDS (the schedule has an entry where the hours > 23 or < 0, or the minutes > 59 or < 0)

- get single restaurant:
    GET /restaurants/:id
    {
        success: true,
        data: {
            _id: string,
            name: string,
            type: string, <- this refers to food type, like fast food or gourmet
            price: string, <- values restricted to CHEAP, AFFORDABLE, EXPENSIVE
            score: float, <- 0 to 5, up to 2 decimals
            location: {
                type: "Point", <- LITERALLY the string "Point"
                coordinates: [longitude, latitude] <- in that order, both numbers
            },
            schedule: {
                MONDAY: { <- available days: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
                    start: {
                        hour: int, <- 0 to 23
                        minute: int <- 0 to 59
                    },
                    end: {
                        hour: int, <- 0 to 23
                        minute: int <- 0 to 59
                    }
                }
                ...same for every other day of the week
            },
            contacts: [
                {
                    name: string,
                    value: string
                },
                ...n contacts
            ],
            images: [string], <- Image URLs hosted somewhere
            added_by: string, <- email of adder
            added: date,
            deleted: boolean
        }
    }

    Errors:
        DB_ERROR (this error is returned when request could not be handled in time or at all)
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)

- get all restaurants:
    GET /restaurants/all/:query?
    {
        success: true,
        data: { 
            restaurants: [
                {
                    _id: string,
                    name: string,
                    type: string, <- this refers to food type, like fast food or gourmet
                    price: string, <- values restricted to CHEAP, AFFORDABLE, EXPENSIVE
                    score: double, <- 0 to 5
                    location: {
                        type: "Point", <- LITERALLY the string "Point"
                        coordinates: [longitude, latitude] <- in that order, both doubles
                    },
                    schedule: {
                        MONDAY: { <- available days: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
                            start: {
                                hour: int, <- 0 to 23
                                minute: int <- 0 to 59
                            },
                            end: {
                                hour: int, <- 0 to 23
                                minute: int <- 0 to 59
                            }
                        }
                        ...same for every other day of the week
                    },
                    contacts: [
                        {
                            name: string,
                            value: string
                        },
                        ...n contacts
                    ],
                    images: [string], <- Image URLs hosted somewhere
                    added_by: string, <- email of adder
                    added: date
                },
                ...n restaurants
            ]
        }
    }

    The query parameter is a JSON stringified and WILL be parsed upon arrival.
    If the query parameter is NOT given (GET /restaurants/all), all restaurants are returned.
    The JSON may ommit any of it's children upon arrival, and they can come in any order.
    It should have the following structure:

    {
        _id: string,
        name: string,
        type: string, <- this refers to food type, like fast food or gourmet
        price: string, <- values restricted to CHEAP, AFFORDABLE, EXPENSIVE
        score: int, <- 0 to 5
        location: {
            type: "Point", <- LITERALLY the string "Point"
            coordinates: [longitude, latitude] <- in that order, both numbers
        },
        maxDistance: int <- specified in meters. Defaults to 10000 (10km)
    }

    Errors:
        DB_ERROR (this error is returned when request could not be handled in time or at all)
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        UNPARSABLE_JSON (the string received could not be parsed to a JSON)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)

- adding a restaurant's score:
    POST /restaurants/:id/scores/:score
    {
        success: true
    }

    The score parameter must be a number between 0 and 5.

    Errors:
        DB_ERROR (this error is returned when request could not be handled in time or at all)
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)
        SCORE_OUT_OF_BOUNDS (the score is lower than 0 or greater than 5)
        INCORRECT_VALUE_TYPE (a value in the key:value pairs does not hold the correct type)

- getting all restaurant scores
    GET /restaurants/:id/scores
    {
        success: true,
        data: {
            scores: [
                {
                    _id: string,
                    restaurant_id: string,
                    score: int, <- constrained from 0 to 5
                    added_by: string, <- email of adder
                    added: date
                },
                ...n scores
            ]
        }
    }

    Errors:
        DB_ERROR (this error is returned when request could not be handled in time or at all)
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)


- adding a restaurant's image:
    POST /restaurants/:id/images
    {
        success: true
    }

    The image is passed as a Base64 string in the request's JSON body under the key "image". The whole body should look like this:
    {
        "session": string, <- the session string every POST request has
        "image": string <- put the raw Base64 image here
    }
    
    Errors:
        DB_ERROR (this error is returned when request could not be handled in time or at all)
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)
        IMAGE_ERROR (The image does not represent a URL Safe Base64 string of an image, and could not be processed)

- adding a comment under a restaurant
    POST /restaurants/:id/comments/:text
    {
        success: true
    }

    The text parameter is the text of the comment.

    Errors:
        DB_ERROR (this error is returned when request could not be handled in time or at all)
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)

- getting a restaurant's comments
    GET /restaurants/:id/comments
    {
        success: true,
        data: {
            comments: [
                {
                    _id: string,
                    restaurant_id: string,
                    text: string,
                    added_by: string, <- email of adder
                    added: date
                },
                ...n comments
            ]
        }
    }

    Errors:
        DB_ERROR (this error is returned when request could not be handled in time or at all)
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)
        INCORRECT_VALUE_TYPE (a value in the key:value pairs does not hold the correct type)

----------------------------------------------------------------------------------------------------------------
From this point on, session tokens handed will be checked for administrative rights. If the account is not an
administrator and these methods are called an error will be returned.
----------------------------------------------------------------------------------------------------------------

- delete a restaurant:
    DELETE /restaurants/:id
    {
        success:true
    }

    Errors:
        DB_ERROR (this error is returned when request could not be handled in time or at all)
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        USER_IS_NOT_ADMINISTRATOR (the user attempted an action that can only be done from an administrator account)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)

- update a restaurant's info
    PUT /restaurants/:id/:data
    {
        success: true
    }

    The data parameter is a JSON stringified and will be parsed upon arrival.
    The JSON may ommit any of it's children upon arrival, and they can come in any order.
    It should have have the following structure:
    
    {
        name: string,
        type: string, <- this refers to food type, like fast food or gourmet
        price: string, <- values restricted to CHEAP, AFFORDABLE, EXPENSIVE
        location: {
            type: "Point", <- LITERALLY the string "Point"
            coordinates: [longitude, latitude] <- in that order, both numbers
        },
        schedule: [
            MONDAY: { <- available days: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
                start: {
                    hour: int, <- 0 to 23
                    minute: int <- 0 to 59
                },
                end: {
                    hour: int, <- 0 to 23
                    minute: int <- 0 to 59
                }
            }
            ...same for every other day of the week
        ],
        contacts: [
            {
                name: string,
                value: string
            },
            ...n contacts
        ]
    }

    Errors:
        DB_ERROR (this error is returned when request could not be handled in time or at all)
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        USER_IS_NOT_ADMINISTRATOR (the user attempted an action that can only be done from an administrator account)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)
        UNPARSABLE_JSON (the string received could not be parsed to a JSON)
        INCORRECT_VALUE_TYPE (a value in the key:value pairs does not hold the correct type)
        UNKNOWN_PRICE (the price isn't CHEAP, AFFORDABLE or EXPENSIVE)
        SCORE_OUT_OF_BOUNDS (the score is lower than 0 or greater than 5)
        SCHEDULE_OUT_OF_BOUNDS (the schedule has an entry where the hours > 23 or < 0, or the minutes > 59 or < 0)
        SCHEDULE_UNKNOWN_DAY (the schedule includes a day with unknown name)

- get a list of all users:
    GET /users/all
    {
        success: true,
        data: {
            users:[
                {
                    _id: string,
                    name: string,
                    email: string,
                    type: string, <- REGULAR or ADMINISTRATOR
                    added: date
                },
                ...n users
            ]
        }
    }

    Errors:
        DB_ERROR (this error is returned when request could not be handled in time or at all)
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        USER_IS_NOT_ADMINISTRATOR (the user attempted an action that can only be done from an administrator account)