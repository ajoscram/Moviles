RESTaurantes API Specification

The following document describes every HTTP request possible in the system, described by a use case basis.
Every request description includes the HTTP method, route, and JSON returned.
Finally, they include every possible error string they may return on faulty requests.

----------------------------------------------------------------------------------------------------------------
Errors are represented as a JSON comprised of two fields: success and error.

The success field is always false for errors, because it indicates an error occurred. Non-error replies also
include this field, but it is always set to true. Clients should always check this field for errors, and present
an error when it is set to false.

The error field holds any of the error strings described below, under each route's "Errors" section.
There is one special type of error, given when a unhandled route is accessed:
    UNHANDLED_ROUTE

Errors look like this:
{
    success: false,
    error: string
}
----------------------------------------------------------------------------------------------------------------
- getting the system strings in a JSON file:
    GET /strings
    {
        success: true,
        data: {
            users: {
                ...every user type
            },
            prices: {
                ...every price type
            },
            days: {
                ...every day of the week
            },
            errors: {
                ...every possible error
            }
        }
    }

- user sign up:
    POST /users/:name/:email/:password
    {
        success: true
    }

    Errors:
        EMPTY_PARAMETER (a REST parameter was not given with a request or is an empty string)
        EMAIL_USED (email is currently used by another account)

- user login:
    POST /users/sessions/:email/:password/:type <- type must be "ADMINISTRATOR" or "REGULAR"
    {
        success: true,
        data: {
            session: string
        }
    }

    Errors:
        EMPTY_PARAMETER (a REST parameter was not given with a request or is an empty string)
        UNKNOWN_EMAIL (email is not registered in the database)
        INCORRECT_PASSWORD (password does not match the account's)
        UNKNOWN_LOGIN_TYPE (the type was different from ADMINISTRATOR or REGULAR)

- session login:
    PUT /users/sessions/:id
    {
        success: true,
        data: {
            session: string
        }
    }

    Errors:
        EMPTY_PARAMETER (a REST parameter was not given with a request or is an empty string)
        UNKNOWN_SESSION (the session token given is not currently used in an active session)

- session logout:
    DELETE /users/sessions/:id
    {
        success: true
    }
    Errors:
        EMPTY_PARAMETER (a REST parameter was not given with a request or is an empty string)
        UNKNOWN_SESSION (the session token given is not currently used in an active session)

- user forgot password:
    GET /users/:email
    {
        success: true
    }

    Errors:
        EMPTY_PARAMETER (a REST parameter was not given with a request or is an empty string)
        UNKNOWN_EMAIL (email is not registered in the database)

----------------------------------------------------------------------------------------------------------------
From this point on, every single one of these methods require a session token to be given via the HTML's body.
It must be embedded in a JSON, which looks like this:
{
    session: string
}
If this JSON is not found on ANY request of the requests specified below, an error is returned.
----------------------------------------------------------------------------------------------------------------

- add new restaurant:
    POST /restaurants/:data
    {
        success: true
    }

    The data parameter is a JSON stringified and WILL be parsed upon arrival.
    It MUST have the following structure:

    {
        name: string,
        type: string, <- this refers to food type, like fast food or gourmet
        price: string, <- values restricted to CHEAP, AFFORDABLE, EXPENSIVE
        location: {
            latitude: float,
            longitude: float
        },
        schedule: [
            MONDAY: { <- available days: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
                start: {
                    hour: int, <- 0 to 23
                    minute: int <- 0 to 59
                }
                end: {
                    hour: int, <- 0 to 23
                    minute: int <- 0 to 59
                }
            }
            ...same for every other day of the week
        ],
        contacts: [
            {
                name: string,
                value: string
            },
            ...n contacts
        ]
    }

    Errors:
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        EMPTY_PARAMETER (a REST parameter was not given with a request or is an empty string)
        UNPARSABLE_JSON (the string received could not be parsed to a JSON)
        INCOMPLETE_JSON (the JSON is missing a field)
        INCORRECT_VALUE_TYPE (a value in the key:value pairs does not hold the correct type)
        UNKNOWN_PRICE (the price isn't CHEAP, AFFORDABLE or EXPENSIVE)
        SCHEDULE_OUT_OF_BOUNDS (the schedule has an entry where the hours > 23 or < 0, or the minutes > 59 or < 0)
        SCHEDULE_UNKNOWN_DAY (the schedule includes a day with unknown name)

- get single restaurant:
    GET /restaurants/:id
    {
        success: true,
        data: {
            id: int,
            name: string,
            type: string, <- this refers to food type, like fast food or gourmet
            price: string, <- values restricted to CHEAP, AFFORDABLE, EXPENSIVE
            score: float, <- 0 to 5, up to 2 decimals
            location: {
                latitude: float,
                longitude: float
            },
            schedule: [
                MONDAY: { <- available days: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
                    start: {
                        hour: int, <- 0 to 23
                        minute: int <- 0 to 59
                    }
                    end: {
                        hour: int, <- 0 to 23
                        minute: int <- 0 to 59
                    }
                }
                ...same for every other day of the week
            ],
            contacts: [
                {
                    name: string,
                    value: string
                },
                ...n contacts
            ],
            images: [string], <- Image URLs hosted somewhere
            added_by: string, <- email of adder
            added: date
        }
    }

    Errors:
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        EMPTY_PARAMETER (a REST parameter was not given with a request or is an empty string)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)

- get all restaurants:
    GET /restaurants/all/:query?
    {
        success: true,
        data: {
            restaurants: [
                {
                    id: int,
                    name: string,
                    type: string, <- this refers to food type, like fast food or gourmet
                    price: string, <- values restricted to CHEAP, AFFORDABLE, EXPENSIVE
                    score: float, <- 0 to 5, float
                    location: {
                        latitude: float,
                        longitude: float
                    },
                    schedule: [
                        MONDAY: { <- available days: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
                            start: {
                                hour: int, <- 0 to 23
                                minute: int <- 0 to 59
                            }
                            end: {
                                hour: int, <- 0 to 23
                                minute: int <- 0 to 59
                            }
                        }
                        ...same for every other day of the week
                    ],
                    contacts: [
                        {
                            name: string,
                            value: string
                        },
                        ...n contacts
                    ],
                    images: [string], <- Image URLs hosted somewhere
                    added_by: string, <- email of adder
                    added: date
                },
                ...n restaurants
            ]
        }
    }

    The query parameter is a JSON stringified and WILL be parsed upon arrival.
    If the query parameter is NOT given (GET /restaurants/all), all restaurants are returned.
    The JSON may ommit any of it's children upon arrival, and they can come in any order.
    It should have the following structure:

    {
        id: int,
        name: string,
        type: string, <- this refers to food type, like fast food or gourmet
        price: string, <- values restricted to CHEAP, AFFORDABLE, EXPENSIVE
        score: int, <- 0 to 5
        location: {
            latitude: float,
            longitude: float,
            radiusSize: float
        }
    }

    Errors:
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        EMPTY_PARAMETER (a REST parameter was not given with a request or is an empty string)
        UNPARSABLE_JSON (the string received could not be parsed to a JSON)
        INCORRECT_VALUE_TYPE (a value in the key:value pairs does not hold the correct type)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)
        UNKNOWN_PRICE (the price isn't CHEAP, AFFORDABLE or EXPENSIVE)
        SCORE_OUT_OF_BOUNDS (the score is lower than 0 or greater than 5)

- adding a restaurant's score:
    POST /restaurants/:id/scores/:score
    {
        success: true
    }

    The score parameter must be a number between 0 and 5.

    Errors:
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        EMPTY_PARAMETER (a REST parameter was not given with a request or is an empty string)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)
        SCORE_OUT_OF_BOUNDS (the score is lower than 0 or greater than 5)

- getting all restaurant scores
    GET /restaurants/:id/images
    {
        success: true,
        data: {
            average: float, <- average score for the restaurant
            scores: [
                {
                    added_by: string, <- email of adder
                    added: date
                    score: int <- constrained from 0 to 5
                },
                ...n scores
            ]
        }
    }

    Errors:
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        EMPTY_PARAMETER (a REST parameter was not given with a request or is an empty string)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)


- adding a restaurant's image:
    POST /restaurants/:id/images/:image
    {
        success: true
    }

    The image parameter MUST BE DEFINED LATER ON.
    
    Errors:
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        EMPTY_PARAMETER (a REST parameter was not given with a request or is an empty string)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)

- getting all restaurant image URLs:
    GET /restaurants/:id/images
    {
        success: true,
        data: {
            images: [...n image URLs as strings]
        }
    }

    Errors:
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        EMPTY_PARAMETER (a REST parameter was not given with a request or is an empty string)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)

- adding a comment under a restaurant
    POST restaurants/:id/comments/:text
    {
        success: true
    }

    The text parameter is the text of the comment.

    Errors:
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        EMPTY_PARAMETER (a REST parameter was not given with a request or is an empty string)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)

- getting a restaurant's comments
    GET restaurants/:id/comments
    {
        success: true,
        data: {
            comments: [
                {
                    added_by: string, <- email of adder
                    added: date
                    text: string
                },
                ...n comments
            ]
        }
    }

    Errors:
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        EMPTY_PARAMETER (a REST parameter was not given with a request or is an empty string)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)

----------------------------------------------------------------------------------------------------------------
From this point on, session tokens handed will be checked for administrative rights. If the account is not an
administrator and these methods are called an error will be returned.
----------------------------------------------------------------------------------------------------------------

- delete a restaurant:
    DELETE /restaurants/:id
    {
        success:true
    }

    Errors:
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        EMPTY_PARAMETER (a REST parameter was not given with a request or is an empty string)
        USER_IS_NOT_ADMINISTRATOR (the user attempted an action that can only be done from an administrator account)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)

- update a restaurant's info
    PUT /restaurants/:id/:data
    {
        success: true
    }

    The data parameter is a JSON stringified and will be parsed upon arrival.
    The JSON may ommit any of it's children upon arrival, and they can come in any order.
    It should have have the following structure:
    
    {
        name: string,
        type: string, <- this refers to food type, like fast food or gourmet
        price: string, <- values restricted to CHEAP, AFFORDABLE, EXPENSIVE
        score: float, <- 0 to 5, up to 2 decimals
        location: {
            latitude: float,
            longitude: float
        },
        schedule: [
            MONDAY: { <- available days: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
                start: {
                    hour: int, <- 0 to 23
                    minute: int <- 0 to 59
                }
                end: {
                    hour: int, <- 0 to 23
                    minute: int <- 0 to 59
                }
            }
            ...same for every other day of the week
        ],
        contacts: [
            {
                name: string,
                value: string
            },
            ...n contacts
        ]
    }

    Errors:
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        EMPTY_PARAMETER (a REST parameter was not given with a request or is an empty string)
        USER_IS_NOT_ADMINISTRATOR (the user attempted an action that can only be done from an administrator account)
        UNKNOWN_RESTAURANT_ID (the restaurant id is not registered in the database)
        UNPARSABLE_JSON (the string received could not be parsed to a JSON)
        INCORRECT_VALUE_TYPE (a value in the key:value pairs does not hold the correct type)
        UNKNOWN_PRICE (the price isn't CHEAP, AFFORDABLE or EXPENSIVE)
        SCORE_OUT_OF_BOUNDS (the score is lower than 0 or greater than 5)
        SCHEDULE_OUT_OF_BOUNDS (the schedule has an entry where the hours > 23 or < 0, or the minutes > 59 or < 0)
        SCHEDULE_UNKNOWN_DAY (the schedule includes a day with unknown name)

- get a list of all users:
    GET /users/all
    {
        success: true,
        users:[
            {
                name: string,
                email: string
            },
            ...n users
        ]
    }

    Errors:
        UNKNOWN_SESSION (the session token provided in the HTML's body is not currently used in an active session)
        USER_IS_NOT_ADMINISTRATOR (the user attempted an action that can only be done from an administrator account)